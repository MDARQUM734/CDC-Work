Question 215
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int num : nums) pq.add(num);
        int res = 0;
        while(k>0){
            res=pq.poll();
            k--;
        }
        return res;
    }
}
Kth smallest Element
class Solution {
    public int kthSmallest(int[] arr, int k) {
        // Code here
        int n = arr.length;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int num : arr) pq.add(num);
        int res = 0;
        while(k>0){
            res = pq.poll();
            k--;
        }
        return res;
    }
}
Question 347
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int n = nums.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>(
            (a,b) -> map.get(b) - map.get(a)
        );
        pq.addAll(map.keySet());
        int res[] = new int[k];
        for(int i=0; i<k; i++){
            res[i] = pq.poll();
        }
        return res;
    }
    Question 239
    class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        Stack<Integer> st = new Stack<>();
        int ans[] = new int[n-k+1];
        int z = 0;
        int nge[] = new int[n];
        nge[n-1] = n;
        st.push(n-1);
        for(int i=n-2; i>=0; i--){
            while(!st.isEmpty() && nums[st.peek()] < nums[i]){
                st.pop();
            }
            if(st.size() == 0) nge[i] = n;
            else nge[i] = st.peek();
            st.push(i);
        }
        int j  = 0;
        for(int i=0; i<n-k+1; i++){
            if(j >= i+k) j=i;
            int max =  nums[j];
            while(j<i+k){
                max = nums[j];
                j = nge[j];  
            }
            ans[z++] = max;
        }
        return ans;
    }
}
    
Question 404
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
         if (root == null) {
            return 0;
        }
        
        int sum = 0;
        if (root.left != null && root.left.left == null && root.left.right == null) {
            sum += root.left.val;
        }
        sum += sumOfLeftLeaves(root.left);
        sum += sumOfLeftLeaves(root.right);
        
        return sum;
    }
}
Question IsoMorphic String
class Solution {
    public boolean isIsomorphic(String s, String t) {
        int n = s.length();
        int m = t.length();
        if(n != m) return false;
        HashMap<Character,Character> map = new HashMap<>();
        HashMap<Character,Character> map2 = new HashMap<>(); 
        for(int i=0; i<n; i++){
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            if(map.containsKey(c1)){
                if(map.get(c1) != c2) return false;
            }else{
                map.put(c1,c2);
            } 
            if(map2.containsKey(c2)){
                if(map2.get(c2) != c1) return false;
            }else{
                map2.put(c2,c1);
            }
        }
        return true;
    }
}
