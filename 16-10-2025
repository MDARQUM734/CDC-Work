Question 155(LC)
class MinStack {
    Stack<Integer> st = new Stack<>();
    Stack<Integer> min = new Stack<>();

    public MinStack() {
        
    }
    
    public void push(int val) {
        if(st.size() == 0){
            st.push(val);
            min.push(val);
        }else{
            st.push(val);
            if(min.peek() < val) min.push(min.peek());
            else min.push(val);
        }
    }
    
    public void pop() {
        st.pop();
        min.pop();
    }
    
    public int top() {
        return st.peek();
    }
Question 622
class MyCircularQueue {
    private int[] queue;
    private int front,rear,capacity,size;
    public MyCircularQueue(int k) {
         capacity = k;
        front = -1;
        rear = -1;
        size = 0;
        queue = new int[k];
    }
    
    public boolean enQueue(int value) {
        if(isFull()) return false;
        if(size == 0){
            front = rear =0 ;
            queue[0] = value;
        }
        else if(rear < queue.length -1){
            queue[++rear] = value;
        }
        else if(rear == queue.length-1){
            rear = 0;
            queue[0] = value;
        }
        size++;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()) return false;
        int val = queue[front];
        if(front == queue.length-1) front = 0;
        else front++;
        size--;
        return true;
    }
    
    public int Front() {
        return isEmpty() ? -1 : queue[front];
    }
    
    public int Rear() {
        return isEmpty() ? -1 : queue[rear];
    }
    
    public boolean isEmpty() {
        if (size == 0) return true;
        else return false; 
    }
    
    public boolean isFull() {
        if(size == capacity) return true;
        else return false;
    }
}

    
    public int getMin() {
        return min.peek();
    }
}

question 735(LC)
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
         Stack<Integer> st = new Stack<>();
        for (int a : asteroids) {
            boolean destroyed = false;
            while (!st.isEmpty() && a < 0 && st.peek() > 0) {
                if (st.peek() < -a) {
                    st.pop(); // yaha ham alredy jo hai usko hata rahe
                    continue; // yaha ham new stone ko destroy kar rahe hai like new stone jo hai wo kam weight ka hai
                } else if (st.peek() == -a) {
                    st.pop(); 
                }
                destroyed = true; 
                break;
            }

            if (!destroyed) st.push(a); 
        }

        int[] res = new int[st.size()];
        for (int i = st.size() - 1; i >= 0; i--) {
            res[i] = st.pop();
        }
        return res;
    }
}
Question 901
class StockSpanner {
    Stack<int[]> stack;
    public StockSpanner() {
        stack = new Stack<>();
    }
    
    public int next(int price) {
        int span = 1;
        while(!stack.isEmpty() && stack.peek()[0] <= price){
            span += stack.pop()[1];
        }
        stack.push(new int[]{price,span}); 
        return span;
    }
}
question LC(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i] + nums[j] == target) return new int[]{i,j};
            }
        }
        return new int[]{-1,-1};
    }
}
Question 121(LC)
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int maxProfit = 0;
        int buyPrice = Integer.MAX_VALUE;
        for(int i=0; i<n; i++){
            if(prices[i] > buyPrice){
                int profit = prices[i] - buyPrice;
                maxProfit = Math.max(maxProfit,profit);
            }else{
                buyPrice = prices[i];
            }
        }
        return maxProfit;
    }
}
Question 75
class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int red=0, white = 0, blue = 0;
        int i=0;
        while(i<n){
            if(nums[i] == 0) red++;
            else if(nums[i] == 1) white++;
            else blue++;
            i++;
        }
        i=0;
        while(i<red){
            nums[i++] = 0;
        }
        while(i < red+white){
            nums[i++] = 1;
        }
        while(i<n){
            nums[i++]=2;
        }
    }
}
Question 11
class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int i = 0;
        int j = n-1;
        int maxArea = 0;
        while(i<j){
            int currArea = Math.min(height[i],height[j]) * (j-i);
            maxArea = Math.max(currArea,maxArea);
            if(height[j] > height[i]){
                i++;
            } else{
                j--;
            }
        }
        return maxArea;
    }
}
Question 88
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0;
        int j = 0;
        int k = 0;
        int res[]= new int[m+n];
        while(i<m && j<n){
            if(nums1[i] < nums2[j]){
                res[k++] = nums1[i++];
            } else {
                res[k++] = nums2[j++];
            } 
        }
        while(i<m){
            res[k++]=nums1[i++];
        }
        while(j<n){
            res[k++]=nums2[j++];
        }
        for(int z =0; z<m+n; z++){
            nums1[z] = res[z];
        }
    }
}
Question 42
class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int leftmax[]=new int [n];
        leftmax[0]=height[0];
        for(int i=1; i<n; i++){
            leftmax[i]=Math.max(height[i],leftmax[i-1]);
        }
        int rightmax[]=new int[n];
        rightmax[n-1]=height[n-1];
        for(int i=n-2; i>=0; i--){
            rightmax[i]=Math.max(height[i],rightmax[i+1]);
        }
        int trappedwater=0;
        for(int i=0; i<n; i++){
            int waterlevel=Math.min(leftmax[i],rightmax[i]);
            trappedwater+=(waterlevel-height[i])*1;
        }
        return trappedwater;
        
    }
}
Question 232
class MyQueue {
    Stack<Integer> st = new Stack<>();
    Stack<Integer> helper = new Stack<>();
    public MyQueue() {
        
    }
    
    public void push(int x) {
        st.push(x);
    }
    
    public int pop() {
        while(st.size()>1){
            helper.push(st.pop());
        }
        int x = st.pop();
        while(helper.size()>0){
            st.push(helper.pop());
        }
        return x;
    }
    
    public int peek() {
        while(st.size()>1){
            helper.push(st.pop());
        }
        int x = st.peek();
        while(helper.size()>0){
            st.push(helper.pop());
        }
        return x;
    }
    
    public boolean empty() {
        if(st.size()>0) return false;
        else return true;
    }
}
