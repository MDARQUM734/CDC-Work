1.Reverse the Array

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    public static void reverseArray(ArrayList<Integer> arr, int m)
    {
        int i = m + 1;
        int j = arr.size() - 1;
        while (i < j) {
            int temp = arr.get(i);
            arr.set(i, arr.get(j));
            arr.set(j, temp);
            i++;
            j--;
        }
    }

2. Removing Min and Max

class Solution {
    public int minimumDeletions(int[] nums) {
       int n = nums.length;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int minIdx = 0, maxIdx = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] < min) {
                min = nums[i];
                minIdx = i;
            }
            if (nums[i] > max) {
                max = nums[i];
                maxIdx = i;
            }
        }
        if (minIdx > maxIdx) {
            int temp = minIdx;
            minIdx = maxIdx;
            maxIdx = temp;
        }
        int front = maxIdx + 1;
        int back = n - minIdx;
        int both = (minIdx + 1) + (n - maxIdx);

        return Math.min(front, Math.min(back, both));
    }
}

3.question
class Solution {
    public int[] runningSum(int[] nums) {
        int n = nums.length;
        int res[] = new int[n];
        res[0]=nums[0];
        for(int i=1; i<n; i++){
            res[i] = nums[i]+res[i-1];
        }
        return res;
    }
}

4.question
class Solution {
    public int maxFrequencyElements(int[] nums) {
        int n = nums.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }
        int max = 0;
        int cnt = 0;
        for(int val : map.values()){
            max = Math.max(max,val);
        }
        for(int val : map.values()){
            if(val == max){
                cnt += val;
            }
        }
        return cnt;
    }
}
5.question
class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        int result[] = new int[n];
        k=k%n;
        for(int i=0; i<k; i++){
            result[i]=nums[n-k+i];
        }
        for (int i = k; i < n; i++) {
            result[i] = nums[i - k];
        }
        for(int i=0; i<n; i++){
            nums[i]=result[i];
        }
    }
}

6.


7.question
class Solution {
    public int removeDuplicates(int[] nums) {
        int n=nums.length;
        int k=1;
        for(int i=1; i<n; i++){
            if(nums[i]!=nums[k-1]){
            nums[k]=nums[i];
            k++;
            }
        }
        return k;
    }
}

8.question
class Solution {
    public int pivotIndex(int[] nums) {
        int n = nums.length;
        int sumLeft[] = new int[n];
        int sumRight[] = new int[n];
        sumLeft[0] = nums[0];
        sumRight[n-1]=nums[n-1];
        for(int i=1; i<n; i++){
            sumLeft[i] = nums[i]+sumLeft[i-1];
        }
        for(int i=n-2; i>=0; i--){
            sumRight[i] = nums[i] + sumRight[i+1];
        }
        for(int i=0; i<n; i++){
            if(sumLeft[i] == sumRight[i]) return i;
        }
        return -1;
    }
}

question
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        int j =0;
        HashSet<Integer> set = new HashSet<>();
        ArrayList<Integer> list = new ArrayList<>();
        for(int i =0; i<n; i++){
            set.add(nums1[i]);
        }
        for(int i =0; i<m; i++){
            if(set.contains(nums2[i])){
                list.add(nums2[i]);
                set.remove(nums2[i]);
                j++;
            }
        }
        int[] res = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            res[i] = list.get(i);
        }
        return res;
    }
}

Question (53  LC)
class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int currSum = nums[0];
        int maxSum = nums[0];
        for(int i=1; i<n; i++){
            currSum = Math.max(nums[i]+currSum,nums[i]);
            maxSum = Math.max(currSum,maxSum);
        }
        return maxSum;
    }
}
