Question 90
class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        int n = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(0,nums,new ArrayList<>(),result);
        return result;
    }
    
    public void backtrack(int start,int nums[], List<Integer> current,List<List<Integer>> result){
        result.add(new ArrayList<>(current));
        for(int i=start; i<nums.length; i++){
            if(i>start && nums[i] == nums[i-1]) continue;
            current.add(nums[i]);
            backtrack(i+1,nums,current,result);
            current.remove(current.size()-1);
        }
    }
}
Question 37
class Solution {
    public boolean isSafe(int row, int col,char[][] board,char num){
        for(int i=0; i<9; i++){
            if(board[row][i] == num) return false;
        }
        for(int i=0; i<9; i++){
            if(board[i][col] == num) return false;
        }
        int sRow = row/3*3;
        int sCol = col/3*3;
        for(int i=sRow; i<sRow+3; i++){
            for(int j=sCol; j<sCol+3; j++){
                if(board[i][j] == num) return false;
            }
        }
        return true;
    }
    public void solve(char[][] board,int row, int col,char[][] grid){
        if(row == 9){
            for(int i=0; i<9; i++){
                for(int j=0; j<9; j++){
                    grid[i][j] = board[i][j];
                }
            }
            return;
        }
        else if(board[row][col] != '.'){
            if(col != 8) solve(board,row,col+1,grid);
            else solve(board,row+1,0,grid);
        }
        else{
            for(char ch ='1'; ch<='9'; ch++){
                if(isSafe(row,col,board,ch)){
                    board[row][col] = ch;
                    if(col != 8) solve(board,row,col+1,grid);
                    else solve(board,row+1,0,grid);
                    board[row][col] = '.';
                }
            }
        }
    }
    public void solveSudoku(char[][] board) {
        char[][] grid = new char[9][9];
        solve(board,0,0,grid);
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                board[i][j] = grid[i][j];
            }
        }
    }
}
Question 455
class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);
        int n = g.length;
        int m = s.length;
        int count = 0;
        int i = 0;
        int j = 0;
        while(i<n && j<m){
            if(g[i] <= s[j]){
                count++;
                i++;
                j++;
            }else{
                j++;
            }
        }
        return count;
    }
}
Question 605
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int m = flowerbed.length;
        int count = 0;
        for(int i=0; i<m; i++){
            if(flowerbed[i] == 0){
                int prev = (i == 0) ? 0 : flowerbed[i-1];
                int next = (i == m-1) ? 0 : flowerbed[i+1];

                if(prev == 0 && next == 0){
                    count++;
                    flowerbed[i] = 1; // plant kar deye
                    if(count >= n) return true;
                }
            }
        }
        if(count >= n) return true; // agar n = 0 hai toh and not placable ho toh
        else return false;
    }
}
