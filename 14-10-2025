

Question
class Solution {
    String removeDuplicates(String s) {
        int n = s.length();
        HashSet<Character> set = new HashSet<>();
        StringBuilder str = new StringBuilder();
        for(char ch : s.toCharArray()){
            if(!set.contains(ch)){
                str.append(ch);
                set.add(ch);
            }
        }
        return str.toString();
    }
}


Question
import java.io.*;
import java.util.*;

class program {

  public static void main(String[] args) {
    String str = "HI AMY AND JAY";
    int n = str.length();
    int spaces = 0;

    for (int i = 0; i < n; i++) {
      if (str.charAt(i) == ' ')
        spaces = spaces + 1;
    }

    System.out.print("Number of words are ");
    System.out.print(spaces + 1);
  }
}

Question Gfg(Factorial)
class Solution {
    // Function to calculate factorial of a number.
    int factorial(int n) {
        // code here
        int res = 1;
        while(n>0){
            res *= n;
            n--;
        }
        return res;
    }
}
Question
class Solution {
    public int reverseExponentiation(int n) {
        // code here
        int rev = 0;
        int temp = n;
        while(temp > 0){
            int digit = temp%10;
            rev = rev*10 + digit;
            temp = temp/10;
        }
        int result = 1;
        for (int j = 0; j < rev; j++) {
            result *= n;
        }
        return result;
    }
}

Question
class Solution {
    public static void printTillN(int N) {
        // code here
        // if(N == 0){
        //     return;
        // }
        // printTillN(N-1);
        // System.out.print(N+" ");
        for(int i=1; i<=N; i++){
            System.out.print(i+" ");
        }
    }
}
question gfg(Count Digit)
class Solution {
    static int evenlyDivides(int n) {
        // code here
        int count = 0;
        int temp = n;
        while(temp > 0){
            int digit = temp%10;
            if(digit != 0 && n % digit == 0) count++;
            temp = temp/10;
        }
        return count;
    }
}
// User function Template for Java

class Solution {
    int arraySum(int arr[]) {
        // code here
        int n = arr.length;
        int sum = 0;
        for(int i=0; i<n; i++){
            sum += arr[i];
        }
        return sum;
    }
}
Question
class Solution {
    public int pivotIndex(int[] nums) {
        int n = nums.length;
        int sumLeft[] = new int[n];
        int sumRight[] = new int[n];
        sumLeft[0] = nums[0];
        sumRight[n-1]=nums[n-1];
        for(int i=1; i<n; i++){
            sumLeft[i] = nums[i]+sumLeft[i-1];
        }
        for(int i=n-2; i>=0; i--){
            sumRight[i] = nums[i] + sumRight[i+1];
        }
        for(int i=0; i<n; i++){
            if(sumLeft[i] == sumRight[i]) return i;
        }
        return -1;
    }
Question Nth fib
class Solution {
    public int nthFibonacci(int n) {
        // code here
        if(n==0 || n==1) return n;
        return nthFibonacci(n-1)+nthFibonacci(n-2);
    }
}
Question
class Solution {
    public int towerOfHanoi(int n, int from, int to, int aux) {
        // code here
        int count = 0;
        if(n==1){
            return 1;
        }
        count += towerOfHanoi(n-1,from,aux,to); // n-1 keleye count
        count++; // last element ke leye one move
        count += towerOfHanoi(n-1,aux,to,from); // last ke leye move
        return count;
    }
}
Question Spiral
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        int n = matrix.length;
        int m = matrix[0].length;
        int top = 0;
        int bottom = n-1;
        int left = 0;
        int right = m-1;
        while(top <= bottom && left <= right){
                for(int i=left; i<=right; i++){
                    list.add(matrix[top][i]);
                }
            top++;
                for(int i=top; i<=bottom; i++){
                    list.add(matrix[i][right]);
                }
            right--;
            if(top<=bottom){
                for(int i=right; i>=left; i--){
                    list.add(matrix[bottom][i]);
                }
                bottom--;
            }
            if(left <= right){
                for(int i=bottom; i>=top; i--){
                    list.add(matrix[i][left]);
                }
                left++;
            }
        }
        return list;
    }
}
Question 74LC
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        if(n == 1 && m ==1) {
            if(matrix[0][0] == target)return true;
            else return false;
        }
        // mY WAy
        // int i =0;
        // while(i<n){
        //     if(matrix[i][0] == target || matrix[i][m-1] == target) return true;
        //     if(matrix[i][0] <= target && target <= matrix[i][m-1]){
        //     for(int k=0; k<m; k++){
        //             if(matrix[i][k] == target) return true;
        //     }
        // }
        // i++;
        // }
        // return false;
        


        // Second Easy Way
        int row = 0, col=m-1;
        while(row < n && col>=0){
            if(matrix[row][col] == target) return true;
            else if(matrix[row][col] > target) col--;
            else row++;
        }
    return false;
    }
}

}
