Question 78
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(0, nums, new ArrayList<>(), result);
        return result;
    }
    public void backtrack(int start, int nums[],List<Integer> current, List<List<Integer>> result){
        result.add(new ArrayList<>(current));
        for(int i=start ; i<nums.length; i++){
            current.add(nums[i]);
            backtrack(i+1,nums,current,result);
            current.remove(current.size()-1);
        }
    }
}
Question 46
class Solution {
    public void backtrack(int nums[],List<Integer>path,List<List<Integer>> result){
        if(path.size() == nums.length){
            result.add(new ArrayList<>(path));
            return;
        }
        for(int num : nums){
            if(path.contains(num)) continue;
            path.add(num);
            backtrack(nums,path,result);
            path.remove(path.size()-1);
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums,new ArrayList<>(), result);
        return result;
    }
}
Question Subset2
class Solution {
    public void backtrack(int start, int arr[], ArrayList<Integer>current,ArrayList<ArrayList<Integer>> result){
        result.add(new ArrayList<>(current));
        for(int i = start; i<arr.length; i++){
            if(i > start && arr[i-1] == arr[i]) continue;
            current.add(arr[i]);
            backtrack(i+1,arr,current,result);
            current.remove(current.size()-1);
        }
    }
    public ArrayList<ArrayList<Integer>> findSubsets(int[] arr) {
        // code here
        int n = arr.length;
        Arrays.sort(arr);
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        backtrack(0,arr,new ArrayList<>(),result);
        return result;
    }
}
Question 51
class Solution {
    private boolean isSafe(char[][] board, int row, int col){
        int n = board.length;
        for(int j=0; j<n; j++){
            if(board[row][j]=='Q') return false;
        }
        for(int i =0; i<n; i++){
            if(board[i][col]=='Q') return false;
        }
        int i = row;
        int j = col;
        while(i>=0 && j<n){
            if(board[i][j]=='Q') return false;
            i--;
            j++;
        }
        i = row;
        j = col;
        while(i<n && j<n){
            if(board[i][j]=='Q') return false;
            i++;
            j++;
        }
        i=row;
        j=col;
        while(i<n && j>=0){
            if(board[i][j]=='Q') return false;
            i++;
            j--;
        }
        i=row;
        j=col;
        while(i>=0 && j>=0){
            if(board[i][j] =='Q') return false;
            i--;
            j--;
        }
        return true;
    }
    private void nqueen(char[][] board,int row, List<List<String>> ans){
        int n = board.length;
        if(row == n){
            // copy 2D array into list of string
            List<String> l = new ArrayList<>();
            for(int i =0; i<n; i++){
                String str ="";
                for(int j =0; j<n; j++){
                    str += board[i][j];
                }
                l.add(str);
            }
            ans.add(l);
            return;
    }
    for(int j=0; j<n; j++){
        if(isSafe(board,row,j)){
            board[row][j]='Q';
            nqueen(board, row+1,ans);//
            board[row][j]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i =0; i<n; i++){
            for(int j =0; j<n; j++){
                board[i][j]='.';
            }
        }
        List<List<String>> ans = new ArrayList<>();
        nqueen(board,0,ans);
        return ans; 
    }
}
Question 77
class Solution {
    public void helper(int start,int n,int k, List<List<Integer>> result,List<Integer> curr){
        if(curr.size() == k){
            result.add(new ArrayList<>(curr));
            return;
        }
        for(int i=start; i<=n; i++){
            curr.add(i);
            helper(i+1,n,k,result,curr);
            curr.remove(curr.size()-1);
        }
    }
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        helper(1,n,k,result,new ArrayList<>());
        return result;
    }
}
